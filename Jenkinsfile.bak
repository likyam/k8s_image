pipeline{

    agent   any

    //选项
    options {
        //设置终端显示颜色
        ansiColor('gnome-terminal')
    }

    //全局变量
    environment {
        //设置镜像版本
        //DEV_IMAGE_VERSION = "dev_${sh(script:'head -c 6 /dev/random | base64' , returnStdout: true)}"
        DEV_IMAGE_VERSION = "dev"

        //Harbor 镜像中心地址
        REGISTRY_URL = "172.16.222.250:8443"

        //Dockerfile 文件地址
        DOCKERFILE = "$WORKSPACE/service/permission/api/Dockerfile"

        //yaml 文件地址
        YAML_FILE = "$WORKSPACE/service/permission/devops/dev/dev.yaml"

        //镜像名称
        DOCKER_IMAGE_NAME = "janrs-permission-api:$DEV_IMAGE_VERSION"

        //Harbor 镜像名称
        REGISTRY_IMAGE_NAME = "172.16.222.250:8443/janrs-io-dev/$DOCKER_IMAGE_NAME"

    }

    stages{
        //拉取项目代码
        stage('Pull Code'){
            steps{

                echo '>>>>>>>>>>>>>>>>>>START PULL CODE<<<<<<<<<<<<<<<<<<<<'

                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[url: 'ssh://git@172.16.222.250:1122/janrs-io/janrs.git']]])

                echo '>>>>>>>>>>>>>>>>>>END PULL CODE <<<<<<<<<<<<<<<<<<<<'

            }
        }
        //构建镜像
        stage('Build Image'){
            steps{

                echo '>>>>>>>>>>>>>>>>>>START BUILD IMAGE<<<<<<<<<<<<<<<<<<<<'

                //sh "docker build -t janrs-permission-api:$DEV_IMAGE_VERSION -f $WORKSPACE/service/permission/api/Dockerfile ."
                //sh "docker build -t janrs-permission-api:$BUILD_ID -f $WORKSPACE/service/permission/api/Dockerfile ."
                sh "docker build -t $REGISTRY_IMAGE_NAME -f $DOCKERFILE ."

                echo '>>>>>>>>>>>>>>>>>>START BUILD IMAGE<<<<<<<<<<<<<<<<<<<<'
            }
        }
        //推送镜像
        stage('Push Image'){
            steps{

                echo '>>>>>>>>>>>>>>>>>>START PUSH IMAGE<<<<<<<<<<<<<<<<<<<<'

                //账号密码脱敏
                withCredentials([usernamePassword(credentialsId: 'harbor_secret', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh "echo $password | docker login https://$REGISTRY_URL -u $username --password-stdin"
                }

                //sh "docker tag janrs-permission-api:$DEV_IMAGE_VERSION 172.16.222.250:8443/janrs-io/janrs-permission-api:$DEV_IMAGE_VERSION"
                //sh "docker push 172.16.222.250:8443/janrs-io/janrs-permission-api:$DEV_IMAGE_VERSION"
                sh "docker push $REGISTRY_IMAGE_NAME"

                echo '>>>>>>>>>>>>>>>>>>END PUSH IMAGE<<<<<<<<<<<<<<<<<<<<'
            }
        }
        //删除镜像
        stage('Delete Image'){
            steps{

                echo '>>>>>>>>>>>>>>>>>>START DELETE IMAGE<<<<<<<<<<<<<<<<<<<<'

                //删除本地镜像
                //sh "docker rmi janrs-permission-api:$DEV_IMAGE_VERSION"
                //sh "docker rmi 172.16.222.250:8443/janrs-io/janrs-permission-api:$DEV_IMAGE_VERSION"
                sh "docker rmi $REGISTRY_IMAGE_NAME"

                //删除缓存的中间镜像。如果是第一次部署项目，可先将该命令注释。
                //后面再打开该参数。不删除的话，会一直增加中间镜像，占用磁盘空间。
                sh "docker image prune -f --filter \"until=10m\""

                echo '>>>>>>>>>>>>>>>>>>END DELETE IMAGE<<<<<<<<<<<<<<<<<<<<'

            }
        }
        //部署到 kubernetes
        stage('Deploy to k8s'){

            steps{

                echo '>>>>>>>>>>>>>>>>>>START DEPLOY<<<<<<<<<<<<<<<<<<<<'

                sh "sed -i 's/DEV_IMAGE_VERSION/$DEV_IMAGE_VERSION/g' $YAML_FILE"
                sh "kubectl apply -f $YAML_FILE --record"

                echo '>>>>>>>>>>>>>>>>>>END DEPLOY<<<<<<<<<<<<<<<<<<<<'

            }
        }
    }
}